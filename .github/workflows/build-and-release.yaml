name: Build and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:

  build-and-push-image:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: docker.io/openvirtualcluster/dashboard:latest

  create-release:
    needs: build-and-push-image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Ensure all tags are fetched

    - name: Get the latest tag
      id: get_tag
      run: |
        latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` || echo "v0.0.0")
        echo "tag=$latest_tag" >> $GITHUB_ENV

    - name: Calculate next version
      id: calculate_version
      run: |
        latest_tag=${{ env.tag }}
        echo "Latest tag: $latest_tag"
        
        if [[ $latest_tag == v* ]]; then
          latest_version=${latest_tag:1}
        else
          latest_version=$latest_tag
        fi
        
        IFS='.' read -r -a version_parts <<< "$latest_version"
        major=${version_parts[0]}
        minor=${version_parts[1]}
        patch=${version_parts[2]}
        
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" != refs/tags/* ]]; then
          patch=$((patch + 1))
        fi
        
        new_version="v$major.$minor.$patch"
        echo "VERSION=$new_version" >> $GITHUB_ENV
        echo "New version: $new_version"
        echo "::set-output name=new_version::$new_version"

    - name: Check if Tag Exists
      id: tag_exists
      run: |
        if git rev-parse "refs/tags/${{ steps.calculate_version.outputs.new_version }}" >/dev/null 2>&1; then
          echo "Tag exists"
          echo "::set-output name=exists::true"
        else
          echo "Tag does not exist"
          echo "::set-output name=exists::false"
        fi

    - name: Create Release Tag
      if: steps.tag_exists.outputs.exists == 'false'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        new_tag=${{ steps.calculate_version.outputs.new_version }}
        git tag $new_tag
        git push https://x-access-token:${GITHUB_TOKEN}@github.com/OpenVirtualCluster/dashboard.git $new_tag

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.calculate_version.outputs.version }}
        name: Release ${{ steps.calculate_version.outputs.version }}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
